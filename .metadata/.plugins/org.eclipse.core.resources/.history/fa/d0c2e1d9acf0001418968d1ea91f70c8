package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.sql.DataSource;

import beani.Oseba;

public class OsebaDAO {
	
	@Resource(lookup="java:jboss/datasources/bhhg")
	DataSource ds;
	
	public OsebaDAO() {
		kreirajTabelo();
	}
	
	public void kreirajTabelo(){
		Connection con = null;
		
		try {
			con = ds.getConnection();
			con.createStatement().execute("create table IF NOT EXISTS oseba(idUporabnika INT PRIMARY KEY AUTO_INCREMENT DEFAULT NULL,uporabniskoIme VARCHAR(20),geslo VARCHAR(40),oseba VARCHAR(100)");
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(con!=null){
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	public void shrani(RegistriranUporabnik r) throws SQLException{
		Connection con = ds.getConnection();
		try {
			con = ds.getConnection();
				PreparedStatement ps=con.prepareStatement("insert into registriranUporabnik(idUporabnika,uporabniskoIme,geslo,oseba ) values (?,?,?,?)");
				ps.setInt(1, r.getIdUporabnika());
				ps.setString(2, r.getUporabniskoIme());				
				ps.setString(3, r.getGeslo());
				ps.setString(4, r.getOseba().toString());
				ps.executeUpdate();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 finally {
			con.close();
		}
	}
	
	public List<RegistriranUporabnik> vrniVse() throws Exception {
		List<RegistriranUporabnik> ret=new ArrayList<RegistriranUporabnik>();
		Connection conn=null;
		try {
			conn=ds.getConnection();
			ResultSet rs=conn.createStatement().executeQuery("select * from registriranUporabnik");
			while (rs.next()) {
				RegistriranUporabnik r =new RegistriranUporabnik();
				r.setIdUporabnika(rs.getInt("idUporabnika"));
				r.setUporabniskoIme(rs.getString("uporabniskoIme"));
				r.setGeslo(rs.getString("geslo"));
				r.setOsebaString(rs.getString("oseba"));
				ret.add(r);
			}
			rs.close();
		} finally {
			conn.close();
		}
		return ret;
	}
	
	
	
	
	
	
	public List<RegistriranUporabnik> najdi(RegistriranUporabnik r, String uporabniskoIme) throws Exception {
		
		Connection con=ds.getConnection();
		
		try {
			con=ds.getConnection();
			
			PreparedStatement ps = con.prepareStatement("select * from registriranUporabnik where uporabniskoIme=?");
			ps.setString(1, r.getUporabniskoIme());
			ResultSet rs=ps.executeQuery();
			while (rs.next()) {
				RegistriranUporabnik l = new RegistriranUporabnik();
				l.setIdUporabnika(rs.getInt("idUporabnika"));
				l.setUporabniskoIme(rs.getString("uporabniskoIme"));
				l.setGeslo(rs.getString("geslo"));
				l.setOsebaString(rs.getString("oseba"));
				najdeni.add(l);
			}
		} finally {
			con.close();
		}
		return najdeni;
	}
}
